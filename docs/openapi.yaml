openapi: 3.0.0

servers:
  - url: http://localhost:1442/

info:
  title: Kupo
  version: v1
  license:
    name: MPL-2.0
    url: https://raw.githubusercontent.com/cardanosolutions/kupo/master/LICENSE
  x-logo:
    url: ./kupo.png
    altText: Kupo!

  description: |
    # Overview

    **Kupo** is a lightweight, configurable, **chain-index** for the Cardano blockchain. It synchronizes data from the blockchain according to **patterns** matching addresses present in transaction outputs, to build a **lookup table** from matches to their associated **output references, values and datum hashes.**

    # Installation

    ### From pre-compiled executables

    Pre-compiled static binaries can be downloaded as build artifacts from [latest releases](https://github.com/CardanoSolutions/kupo/releases) or the continuous [`Nix` Github workflow](https://github.com/CardanoSolutions/kupo/actions).

    ### From Docker

    Kupo is available as a standalone Docker image on [DockerHub](https://hub.docker.com/repository/docker/cardanosolutions/kupo).

    ```console
    $ docker pull cardanosolutions/kupo
    ```

    ### From source

    ```console
    $ nix build -f default.nix kupo.components.exes.kupo
    ```

    This produces a statically-linked executable that provides a command-line interface for passing options and commands.

    # Getting Started

    Kupo connects to a _local [cardano-node](https://github.com/input-output-hk/cardano-node/)_ in order to receive information from the blockchain. It goes without saying that an up-and-running cardano-node is required to run kupo!

    A single kupo server is meant to build an index for a specific set of addresses. Addresses are matched according to flexible patterns. Once matched, results can be queried as JSON via HTTP GET requests.
    For instance, it is possible to synchronize all addresses associated with a given stake key (e.g. `stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q`).

    Provided that the configuration and IPC socket for a cardano-node are available in `some-folder/cardano-node`, one can start a kupo server as follows:

    ```console
    $ kupo \
      --node-socket some-folder/cardano-node/node.socket \
      --node-config some-folder/cardano-node/config.json \
      --since origin \
      --match "*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q" \
      --in-memory
    ```

    #### --in-memory / --workdir

    This will build an index from the beginning of the blockchain (i.e. `origin`) of all transaction outputs where that stake key has been involved in. The `--in-memory` option tells kupo to not persist the index on-disk but to build it fully
    in-memory. When building such a large index (from origin!), this is not recommended as it may cause the program memory usage to grow unbounded.

    Let's fix that:

    ```console
    $ kupo \
      --node-socket some-folder/cardano-node/node.socket \
      --node-config some-folder/cardano-node/config.json \
      --since origin \
      --match "*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q" \
      --workdir ./db
    ```

    Perfect, now kupo will store all the information in a database on-disk at the location pointed by `--workdir`. Incidentally, this also allows kupo to resume its work from where it lefts it in case the server is interrupted. Neat!

    #### --since

    What if we only need to synchronize from a given point in time? For example, we may want to skip the entire Byron and Shelley eras because we know that this stake key may only have been used starting from the Allegra era onwards.
    Fortunately, we can use the `--since` to provide a different starting point!

    ```console
    $ kupo \
      --node-socket some-folder/cardano-node/node.socket \
      --node-config some-folder/cardano-node/config.json \
      --since 16588737.4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a \
      --match "*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q" \
      --workdir ./db
    ```

    Points are given as `{slot_no}.{header_hash}` and defines an exclusive boundary. Said differently, kupo will start synchronizing from the next block following the given point. In case you need them, here are a few points of interest on the Cardano **mainnet**:

    | Era Bound          | SlotNo   | Hash                                                             |
    | ---                | ---      | ---                                                              |
    | Last Byron Block   | 4492799  | f8084c61b6a238acec985b59310b6ecec49c0ab8352249afd7268da5cff2a457 |
    | Last Shelley Block | 16588737 | 4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a |
    | Last Allegra Block | 23068793 | 69c44ac1dda2ec74646e4223bc804d9126f719b1c245dadc2ad65e8de1b276d7 |
    | Last Mary Block    | 39916796 | e72579ff89dc9ed325b723a33624b596c08141c7bd573ecfff56a1f7229e4d09 |
    | Last Alonzo Block  | N/A      | N/A                                                              |

    #### --match

    Kupo can accept one or more matching patterns using the `--match` option. In case multiple patterns are provided, they'll ALL be used when looking for addresses. This allows for example to build an index for a list of payment keys known of a wallet. The syntax for patterns
    is explained in greater details in the [Pattern](#section/Pattern) section below.

    #### --ogmios-host / --ogmios-port

    So far, we've connected Kupo to a local cardano-node, using a unix domain socket as a communication channel. However, Kupo can also connect through [Ogmios](https://github.com/CardanoSolutions/ogmios#readme); and this works for either a local or remote instance of Ogmios! To do so,
    simply swap the `--node-socket` and `--node-config` options for `--ogmios-host` and `--ogmios-port`. For instance:

    ```
    $ kupo \
      --ogmios-host my-ogmios-server.io \
      --ogmios-port 443 \
      --since 16588737.4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a \
      --match "*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q" \
      --workdir ./db
    ```

    Kupo will synchronize data directly from Ogmios! Neat isn't it?

    #### --help

    In case you're lost, don't forget that a summary of this manual is available by running:

    ```console
    $ kupo --help
    ```

    # Pattern

    Kupo can construct patterns from pretty much every constituant of an address, in any kind of format (bech32, base16, base58, you name it!). It also accepts wildcards using the asterisk symbol `*`.
    Conceptually, patterns match the logical structure of (Shelley) addresses which are divided into two parts: a payment part and a delegation part. To learn more about Cardano addresses, feel free
    to look [CIP-0019](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019#readme) for a deep dive!

    Here below is summarized the general syntax for valid patterns. Note that different patterns may match the same addresses. Note also that while `*` will match _any_ Cardano address (Byron included),
    `*/*` will match only Shelley addresses (since Byron addresses do not have any delegation part!).

    ```
                ┏━━━━━━━━━┓
    PATTERN  ╾┬─┫ ADDRESS ┣─────────────────────────┬╼
              │ ┗━━━━━━━━━┛                         │
              │ ┏━━━━━━━━━━━━━━━┓                   │
              ├─┫ STAKE-ADDRESS ┣───────────────────┤
              │ ┗━━━━━━━━━━━━━━━┛                   │
              │ ┏━━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━┓ │
              ├─┫ CREDENTIAL ┣─┤ / ├─┫ CREDENTIAL ┣─┤
              │ ┗━━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━┛ │
              │ ╭───╮                               │
              └─┤ * ├───────────────────────────────┘
                ╰───╯

    ```

    ```
                  ┏━━━━━━━━━━━━━━━━━━━━━━━━┓
    CREDENTIAL ╾┬─┫ BASE16(bytes .size 32) ┣─────────────────────────────┬╼
                │ ┗━━━━━━━━━━━━━━━━━━━━━━━━┛                             │
                │ ┏━━━━━━━━━━━━━━━━━━━━━━━━┓                             │
                ├─┫ BASE16(bytes .size 28) ┣─────────────────────────────┤
                │ ┗━━━━━━━━━━━━━━━━━━━━━━━━┛                             │
                │ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓           │
                ├─┫ BECH32(bytes) .hrp (vk|addr_vk|stake_vk) ┣───────────┤
                │ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛           │
                │ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ │
                ├─┫ BECH32(bytes) .hrp (vkh|addr_vkh|stake_vkh|script) ┣─┤
                │ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ │
                │ ╭───╮                                                  │
                └─┤ * ├──────────────────────────────────────────────────┘
                  ╰───╯
    ```

    ### Examples:

    - `addr1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgz4xq9p`
    - `addr_vk1x7da0l25j04my8sej5ntrgdn38wmshxhplxdfjskn07ufavsgtkqn5hljl/*`
    - `*/script1cda3khwqv60360rp5m7akt50m6ttapacs8rqhn5w342z7r35m37`
    - `dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e/*`
    - `*/4fc6bb0c93780ad706425d9f7dc1d3c5e3ddbf29ba8486dce904a5fc`
    - `*`
    - `*/*`

    # Accessing Results

    Matches can be queried from the server via HTTP GET requests. For example:

    ```console
    $ curl http://localhost:1442/v1/matches
    ```

    will return all matches currently present in the database (be careful when combined with very permissive patterns and wildcards!). The `v1/matches` endpoint actually accept patterns,
    which may be different from the one provided in the command-line. So it for instance possible to build an index for all addresses but then, lookup only a single address as:

    ```console
    $ curl http://localhost:1442/v1/matches/addr1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgz4xq9p
    ```

    The complete API reference is available below.

    <br/><br/>

    <p align="center">
    （✿ ͡◕ ᴗ◕ )つ━━✫ ✧･ﾟ* enjoy *:･ﾟ✧*:･ﾟ💖
    </p>

components:
  schemas:
    Address_Shelley: &Address_Shelley
      title: Shelley+
      type: string
      contentEncoding: bech32
      example: addr1vy3qpx09uscywhpp0ekg9zwmq2yj5vp08husfq6qyh2mpps865j6t

    Address_Stake: &Address_Stake
      title: Stake
      type: string
      contentEncoding: bech32
      example: stake1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgydsx9n

    Address_Bootstrap: &Address_Bootstrap
      title: Bootstrap
      type: string
      contentEncoding: base58
      example: DdzFFzCqrhsnWCKDVxHipmLW7acroB11zWxe1BGP1gCh7EqmgjVPe2qes6HrsQs

    Address_Base16: &Address_Base16
      title: Base16
      type: string
      contentEncoding: base16
      example: 7a5e61936081db3b2117cbf59bd2123748f58ac96786567067f3314661

    Address:
      description: A Cardano address.
      anyOf:
        - <<: *Address_Shelley
        - <<: *Address_Bootstrap

    AddressParameter:
      title: Address
      description: A Cardano address or stake address.
      anyOf:
        - <<: *Address_Shelley
        - <<: *Address_Stake
        - <<: *Address_Bootstrap
        - <<: *Address_Base16

    BadRequest:
      type: object
      additionalProperties: false
      properties:
        hint:
          type: string
          description: Some hint about what went wrong.

    Credential:
      anyOf:
        - title: Bech32
          type: string
          description: |
            A blake2b-224 hash digest of some credential or pre-image of those credentials.
            Supported bech32 prefixes are:
            - vk
            - vkh
            - addr_vk
            - addr_vkh
            - stake_vk
            - stake_vkh
            - script

        - title: Base16 (digest)
          type: string
          description: A blake2b-224 hash digest of some credential (verification key hash or script hash).
          contentEncoding: base16
          minLength: 56
          maxLength: 56

        - title: Base16 (pre-image)
          type: string
          description: A hash pre-image of some credential (verification key or stake key)
          contentEncoding: base16
          minLength: 64
          maxLength: 64

    DatumHash:
      oneOf:
        - title: Digest
          type: string
          description: A blake2b-256 hash digest of a Plutus' datum.
          contentEncoding: base16
          example: 309706b92ad8340cd6a5d31bf9d2e682fdab9fc8865ee3de14e09dedf9b1b635
          minLength: 64
          maxLength: 64

        - title: Nothing
          type: "null"

    Deleted:
      type: object
      required:
        - deleted
      properties:
        deleted:
          description: Number of entities effectively deleted.
          type: integer
          minimum: 0

    HeaderHash:
      type: string
      description: A blake2b-256 hash digest of a block header.
      contentEncoding: base16
      example: 9d09706b92adedf9b1b632e682fdab9fc8865ee3de14e0935d8340cd6a5d31bf
      minLength: 64
      maxLength: 64

    Match:
      type: object
      additionalProperties: false
      required:
        - transaction_id
        - output_index
        - address
        - value
        - datum_hash
        - created_at
        - spent_at
      properties:
        transaction_id: { "$ref": "#/components/schemas/TransactionId" }
        output_index: { "$ref": "#/components/schemas/OutputIndex" }
        address: { "$ref": "#/components/schemas/Address" }
        value: { "$ref": "#/components/schemas/Value" }
        datum_hash: { "$ref": "#/components/schemas/DatumHash" }
        created_at: { "$ref": "#/components/schemas/Point" }
        spent_at:
          oneOf:
            - { "$ref": "#/components/schemas/Point" }
            - type: "null"

    OutputIndex:
      type: integer
      description: An index of an output within a transaction.
      minimum: 0
      example: 2

    Pattern:
      description: |
          A matching pattern for addresses. See [#Pattern]
      anyOf:
        - { "$ref": "#/components/schemas/Wildcard" }
        - { "$ref": "#/components/schemas/AddressParameter" }
        - { "$ref": "#/components/schemas/Credential" }

    Point:
      type: object
      additionalProperties: false
      required:
        - slot_no
        - header_hash
      properties:
        slot_no: { "$ref": "#/components/schemas/SlotNo" }
        header_hash: { "$ref": "#/components/schemas/HeaderHash" }

    SlotNo: &slotNo
      type: integer
      description: An absolut slot number.
      minimum: 0
      example: 51540727

    TransactionId:
      type: string
      description: A blake2b-256 hash digest of a transaction body.
      contentEncoding: base16
      example: 35d8340cd6a5d31bf9d09706b92adedf9b1b632e682fdab9fc8865ee3de14e09
      minLength: 64
      maxLength: 64

    Value:
      type: object
      description: A (multi-asset) value of a transaction's output.
      additionalProperties: false
      required:
        - coins
      properties:
        coins:
          type: integer
          description: A quantity of Lovelace.
          example: 42
        assets:
          type: object
          description:
          propertyNames:
            type: string
            pattern: ^[a-f0-9]{64}(.[a-f0-9]{64})?$
          additionalProperties:
            x-additionalPropertiesName: "{policy_id}.{asset_name}"
            type: integer
            description: A quantity of some asset.
          example:
            5d5b08661220099e5e430475c219518179efc7e6c8289db028904834025d5b086: 231
            efc7e6c8289db028904834025d5b085d5b08661220099e5e430475c2195181796.08661220099e: 1

    Wildcard:
      type: string
      title: wildcard
      enum: ["*"]

    Health:
      type: object
      description: An overview of the server & connection status. Note that, when `most_recent_checkpoint` and `most_recent_node_tip` are equal, the index is fully synchronized.
      additionalProperties: false
      required:
        - connection_status
        - most_recent_checkpoint
        - most_recent_node_tip
      properties:
        connection_status:
          type: string
          description: Condition of the connection with the underlying node.
          enum:
            - connected
            - disconnected
        most_recent_checkpoint:
          oneOf:
            - <<: *slotNo
              description: Absolute slot number of the most recent database checkpoint.
            - type: "null"
              description: Absolute slot number of the most recent database checkpoint.
        most_recent_node_tip:
          oneOf:
            - <<: *slotNo
              description: Absolute slot number of the current tip of the node.
            - type: "null"
              description: Absolute slot number of the current tip of the node.

  parameters:
    pattern-fragment:
      name: pattern-fragment
      in: path
      required: true
      schema:
        anyOf:
          - { "$ref": "#/components/schemas/Wildcard" }
          - { "$ref": "#/components/schemas/AddressParameter" }
          - { "$ref": "#/components/schemas/Credential" }

    spent:
      name: spent
      in: query
      required: false
      allowEmptyValue: true
      description: |
        Query flag (i.e. `?spent`) to filter matches by status, to get only 'spent' matches.

    unspent:
      name: unspent
      in: query
      required: false
      allowEmptyValue: true
      description: |
        Query flag (i.e. `?unspent`) filter matches by status, to get only 'unspent' matches.

paths:
  /v1/matches:
    get:
      operationId: getAllMatches
      tags: ["Matches"]
      summary: Get All Matches
      description: |
        Retrieve all matches from the database, in descending `slot_no` order. Results are streamed to the client for more efficiency.
        Note that this is generally a bad idea for indexes built off permissive patterns (e.g. `*`) for the server will yield a large response.
      parameters:
        - { "$ref": "#/components/parameters/spent" }
        - { "$ref": "#/components/parameters/unspent" }
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema:
                type: array
                items: { "$ref": "#/components/schemas/Match" }

  /v1/matches/{pattern-fragment}:
    get: &getMatches
      operationId: getMatches1Ary
      tags: ["Matches"]
      summary: Get Matches (*)
      description: |
        Retrieve matches from the database matching the given pattern, in descending `slot_no` order. Results are streamed to the client for more efficiency.
        See [Pattern](#section/Pattern) for more information about constructing patterns.
      parameters:
        - { "$ref": "#/components/parameters/pattern-fragment" }
        - { "$ref": "#/components/parameters/spent" }
        - { "$ref": "#/components/parameters/unspent" }
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema:
                type: array
                items: { "$ref": "#/components/schemas/Match" }
        400:
          description: Bad Request
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/BadRequest" }

    delete: &deleteMatches
      operationId: deleteMatches
      tags: ["Matches"]
      summary: Delete Matches (*)
      description: |
          Delete all matches matching the given pattern. Note that this operation is only allowed if the provided pattern isn't a currently active pattern.
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/Deleted" }
        400:
          description: Bad Request
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/BadRequest" }

  /v1/matches/{pattern-fragment}/{pattern-fragment}:
    get:
      <<: *getMatches
      operationId: getMatches2Ary
      summary: Get Matches (*/*)

    delete:
      <<: *deleteMatches
      operationId: deleteMatches2Ary
      summary: Delete Matches (*/*)

  /v1/patterns:
    get:
      operationId: getPatterns
      tags: ["Patterns"]
      summary: Get Patterns
      description: |
        Retrieve all patterns currently configured on the server.
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema:
                type: array
                items: { "$ref": "#/components/schemas/Pattern" }

  /v1/patterns/{pattern-fragment}:
    delete: &deletePattern
      operationId: deletePattern1Ary
      tags: ["Patterns"]
      summary: Delete Pattern (*)
      description: |
        Removes patterns from the database and active filtering. Note that this does
        **NOT** remove the corresponding matches nor will it halt or restart synchronization.
        The server will continue filtering new blocks but, will that pattern removed.
      parameters:
        - { "$ref": "#/components/parameters/pattern-fragment" }
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/Deleted" }
        400:
          description: Bad Request
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/BadRequest" }

    put: &putPattern
      operationId: putPattern1Ary
      tags: [ "Patterns" ]
      summary: Add Pattern (*)
      description: |
        Add a new pattern to watch. This **does not** cause the server to re-sync however!
        Only new blocks will be matched against the pattern.
      parameters:
        - { "$ref": "#/components/parameters/pattern-fragment" }
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema:
                type: array
                items: { "$ref": "#/components/schemas/Pattern" }
        400:
          description: Bad Request
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/BadRequest" }

  /v1/patterns/{pattern-fragment}/{pattern-fragment}:
    delete:
      <<: *deletePattern
      operationId: deletePattern2Ary
      summary: Delete Pattern (*/*)

    put:
      <<: *putPattern
      operationId: putPattern2Ary
      summary: Add Pattern (*/*)

  /v1/checkpoints:
    get:
      operationId: getCheckpoints
      tags: ["Checkpoints"]
      summary: Get Checkpoints
      description: |
        Retrieve all checkpoints currently in the database, in descending `slot_no` order. This is useful to know where
        the synchronization is at. On restart, the synchronization will continue from the most recent checkpoints that
        is also known of the network.
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema:
                type: array
                items: { "$ref": "#/components/schemas/Point" }

  /v1/health:
    get:
      operationId: getHealth
      tags: ["Health"]
      summary: Get Health
      description: |
        Retrieve Kupo's application health status. Note that this call is cheap and does not halt the various concurrent tasks performed by the Kupo.
      responses:
        200:
          description: OK
          content:
            "application/json;charset=utf-8":
              schema: { "$ref": "#/components/schemas/Health" }
